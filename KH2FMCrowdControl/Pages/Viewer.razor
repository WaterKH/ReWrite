@page "/crowdcontrolviewer"

@using KH2FMCrowdControl.Data
@using KH2FMCrowdControl.Twitch
@using Waterkh.Common.Memory

@inject TwitchService TwitchService
@inject MemoryService MemoryService
@inject NavigationManager NavigationManager
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@inject IToastService ToastService

<h1>KH2FM Crowd Control (Watcher View)</h1>

@if (twitchApi == null)
{
    <div>Loading...</div>
}
else
{
    <h2>@viewerUsername Point Total: @(TwitchService.GetUsersCoins(hostUsername, viewerUsername))</h2>

    <br />
    <br />

    <TabControl>
        @foreach (GroupType group in Enum.GetValues(typeof(GroupType)))
        {
            <TabPage Text="@group.ToString()">

                <br />
                <br />

                <div class="row">
                    <KHAccordian ContentHeader="@group.ToString()"
                                 SubGroupTypes="@MemoryService.Options[hostUsername][group].Where(x => x.IsActive).Select(x => x.SubCategory).Distinct()" />
                </div>

                <KHTabPage Host="@hostUsername"
                           Viewer="@viewerUsername"
                           Inputs="@MemoryService.Options[hostUsername][group].Where(x => x.IsActive)" />
            </TabPage>
        }
    </TabControl>
}

@code {

    private int viewerCoins = 500;
    private string viewerUsername;
    private string hostUsername;

    private TwitchApi twitchApi;
    private TwitchUserInfo twitchUserInfo;

    protected override async Task OnInitializedAsync()
    {
        TwitchService.OnUserCoinsUpdated += UpdateUserCoins;

        await base.OnInitializedAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender)
            return;

        twitchUserInfo = await TwitchService.GetUserInfo(NavigationManager);

        viewerUsername = twitchUserInfo.login;

        // Update this to retrieve from the user list in the service
        hostUsername = await localStorage.GetItemAsync<string>("username");

        twitchApi = TwitchService.GetTwitchApi(hostUsername);

        //await MemoryService.InitializeOptions(hostUsername);

        await InvokeAsync(() =>
        {
            base.StateHasChanged();
        });

        await base.OnAfterRenderAsync(firstRender);
    }

    protected async Task UpdateUserCoins(object sender, ChangeEventArgs e)
    {
        await InvokeAsync(() =>
        {
            base.StateHasChanged();
        });
    }
}