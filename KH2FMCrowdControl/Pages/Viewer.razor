@page "/crowdcontrolviewer"

@using KH2FMCrowdControl.Data
@using KH2FMCrowdControl.Twitch
@using Waterkh.Common.Memory

@inject TwitchService TwitchService
@inject MemoryService MemoryService
@inject NavigationManager NavigationManager
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@inject IToastService ToastService

<div class="main">
    <div class="top-row px-4">
        <div class="row" style="padding-top: 15px;padding-bottom: 10px;">
            <div class="col-2">
                <div style="max-height: 50px; overflow: hidden;">
                    <img style="width: 25%;" src="images/ReWrite-Trimmed.png">
                </div>
            </div>

            @if (twitchApi == null)
            {
                <div>Loading...</div>
            }
            else
            {
                <div class="col-8">
                    <h2 style="text-align: center;">@(host.DisplayName)'s Options</h2>
                </div>

                <div class="col-2">
                    <a href="@host.StreamUrl" target="_blank" style="float: right;">Host's Twitch Channel</a>
                </div>
            }
            <div class="col-12">
                <h1>
                </h1>
            </div>
        </div>

        <div class="row" style="padding-top: 15px;padding-bottom: 10px;">
            <div class="col-1">
                <a href="" style="float: left;">Back To Main</a>
            </div>

            <div class="col-3">
                <h4 style="text-align: center">Point Total: @(TwitchService.GetUsersCoins(hostUsername, viewerUsername))</h4>
            </div>

            <div class="col-4">
                <div style="text-align: center;">
                    <div class="btn-group" role="group" style="display: inline-table !important;">
                        @foreach (GroupType groupType in Enum.GetValues(typeof(GroupType)))
                        {
                            <button type="button" class="btn @GetButtonClass(groupType)" @onclick=@(() => ActivatePage(groupType))>
                                @groupType.ToString()
                            </button>
                        }
                    </div>
                </div>
            </div>

            <div class="col-4">
                <a href="https://discord.gg/8KUBjDV" target="_blank" style="float: right;">Developer Discord Server</a>
            </div>
        </div>
    </div>

    <div class="content px-4">

        @if (twitchApi == null)
        {
            <div>Loading...</div>
        }
        else
        {
            @foreach (GroupType groupType in Enum.GetValues(typeof(GroupType)))
            {
                <KHTabPage Host="@hostUsername"
                            Viewer="@viewerUsername"
                            Inputs="@MemoryService.Options[hostUsername][groupType].Where(x => x.IsActive)"
                            IsActive="@(ActiveTab == groupType)" />
            }
        }
    </div>
</div>

@code {

    private int viewerCoins = 500;
    private string viewerUsername;
    private string hostUsername;

    private TwitchApi twitchApi;
    private TwitchUserInfo twitchUserInfo;

    private Data.Host host;

    protected override async Task OnInitializedAsync()
    {
        TwitchService.OnUserCoinsUpdated += UpdateUserCoins;

        await base.OnInitializedAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender)
            return;

        twitchUserInfo = await TwitchService.GetUserInfo(NavigationManager);

        viewerUsername = twitchUserInfo.login;

        // Update this to retrieve from the user list in the service
        hostUsername = await localStorage.GetItemAsync<string>("username");

        twitchApi = TwitchService.GetTwitchApi(hostUsername);
        host = DbContext.Hosts[hostUsername];

        //foreach (GroupType group in Enum.GetValues(typeof(GroupType)))
        //{
        //    this.AddPage(group, new KHTabPage() { Host = hostUsername, Viewer = viewerUsername, Inputs = MemoryService.Options[hostUsername][group].Where(x => x.IsActive) });
        //}

        //await MemoryService.InitializeOptions(hostUsername);

        await InvokeAsync(() =>
        {
            base.StateHasChanged();
        });

        await base.OnAfterRenderAsync(firstRender);
    }

    protected async Task UpdateUserCoins(object sender, ChangeEventArgs e)
    {
        await InvokeAsync(() =>
        {
            base.StateHasChanged();
        });
    }

    #region region Tab Control

    public GroupType ActiveTab { get; set; } = GroupType.Sora;

    string GetButtonClass(GroupType tab)
    {
        return tab == ActiveTab ? "btn-primary" : "btn-secondary";
    }

    protected async Task ActivatePage(GroupType tab)
    {
        ActiveTab = tab;

        await InvokeAsync(() =>
        {
            base.StateHasChanged();
        });
    }

    #endregion Tab Control
}