@using Waterkh.Common.Memory

@foreach (var (subGroup, elements) in PageElements)
{
    @if (subGroup != SubGroupType.None)
    {
        <h1><span class="headline">@subGroup</span></h1>
    }

    <div class="row">
        @foreach (var option in elements)
        {
            @if (option.Cost == 0)
            {
                <KHButtonComponent HostName="@Host"
                                   Name="@option.Name"
                                   Cost="0"
                                   ImageUrl="@option.ImageUrl"
                                   Description="@option.Description"
                                   Method="@(() => DisplayModal(option.SubMethodParams.Where(x => x.IsActive).ToList(), option.Name))"
                                   IsDisabled="@option.IsDisabled" />
            }
            else
            {
                <KHButtonComponent HostName="@Host"
                                   Name="@option.Name"
                                   Cost="@option.Cost"
                                   ViewerName="@Viewer"
                                   Value="@option.Value"
                                   ManipulationType="@option.ManipulationType"
                                   ImageUrl="@option.ImageUrl"
                                   Description="@option.Description" />
            }
        }
    </div>
}

@code {
    [CascadingParameter]
    public IModalService Modal { get; set; }



    [Parameter]
    public string Host { get; set; }

    [Parameter]
    public string Viewer { get; set; }

    [Parameter]
    public System.Collections.Generic.IEnumerable<ButtonTemplate> Inputs { get; set; }


    Dictionary<SubGroupType, List<ButtonTemplate>> PageElements;


    protected override async Task OnInitializedAsync()
    {
        PageElements = new Dictionary<SubGroupType, List<ButtonTemplate>>();

        foreach (var input in Inputs)
        {
            if (!PageElements.ContainsKey(input.SubCategory))
                PageElements.Add(input.SubCategory, new List<ButtonTemplate>());

            PageElements[input.SubCategory].Add(input);
        }

        await base.OnInitializedAsync();
    }

    protected void DisplayModal(List<ButtonTemplate> values, string parentName)
    {
        var parameterName = "Options";
        var parameters = new ModalParameters();

        parameters.Add(parameterName, values);
        parameters.Add("ParentName", parentName);
        parameters.Add("HostName", Host);
        parameters.Add("ViewerName", Viewer);

        Modal.Show<KHModalItems>(parameterName, parameters);
    }
}