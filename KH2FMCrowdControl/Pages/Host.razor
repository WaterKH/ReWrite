@page "/crowdcontrolhost"

@using KH2FMCrowdControl.Data
@using KH2FMCrowdControl.Twitch
@using Waterkh.Common.Memory; 

@inject TwitchService TwitchService
@inject MemoryService MemoryService
@inject NavigationManager NavigationManager
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@inject IToastService ToastService
@inject IJSRuntime JSRuntime
@inject BlazorDownloadFile.IBlazorDownloadFileService BlazorDownloadFileService

<h1>KH2FM Crowd Control (Host View)</h1>

<div>@username Connection Status: @connectionStatus</div>

<div class="row">
    <div class="col-3">
        <button type="button" class="btn btn-info" @onclick="StartHosting">Start Hosting</button>
    </div>
    <div class="col-3">
        <button type="button" class="btn btn-outline-danger" @onclick="StopHosting">Stop Hosting</button>
    </div>
    @if (twitchApi != null)
    {
        <div class="col-1"></div>
        <div class="col-3">
            <InputFile OnChange="UploadOptionSettings" />
        </div>
        <div class="col-2">
            <button type="button" class="btn btn-info" @onclick="DownloadOptionSettings">Download Settings File</button>
            <input type="text" class="form-control" @bind-value="@fileName" placeholder="Optional File Name" style="margin: 5px 0px 0px 0px">
        </div>
    }
</div>

@if (twitchApi != null)
{
    <br />

    <div class="input-group">
        <input type="text" class="form-control" placeholder="Enter Point Amount" @bind-value="pointAmount">
        <input type="text" class="form-control" placeholder="Enter Time in Seconds" @bind-value="time">
        <div class="input-group-append">
            <button class="btn btn-outline-primary" type="button" @onclick="UpdatePointsPerTime">Update</button>
        </div>
    </div>

    <br />
    <br />

    <div class="row">
        <TabControl>
            <TabPage Text="Alerts">
                <div class="col-12" style="padding: 10px;">
                    <div class="row">
                        <div class="col-3">

                        </div>

                        <div style="padding: 10px; overflow: auto; display: flex; flex-direction: column-reverse;">
                            @foreach (var alert in alerts)
                            {
                                <KHAlert Username="@alert.Viewer"
                                         Item="@alert.Item"
                                         ImageUrl="@alert.ImageUrl" />
                            }
                        </div>
                    </div>
                </div>
            </TabPage>
            <TabPage Text="Option Control">
                <div class="col-12" style="padding: 10px;">
                    <TabControl>
                        @foreach (GroupType group in Enum.GetValues(typeof(GroupType)))
                        {
                            <TabPage Text="@group.ToString()">
                                <div class="col-12" style="padding: 10px;">
                                    <TabControl>
                                        @foreach (var option in MemoryService.Options[username][group])
                                        {
                                            <TabPage Text="@option.Name">
                                                <div class="row">
                                                    <div class="col-6" style="padding: 10px;">
                                                        <ChangeOption HostName="@username"
                                                                      Category="group"
                                                                      OptionName="@option.Name"
                                                                      Cost="@option.Cost"
                                                                      IsActive="@option.IsActive" />

                                                        @if (option.Cost == 0)
                                                        {
                                                            @foreach (var subOption in option.SubMethodParams)
                                                            {
                                                                <ChangeOption HostName="@username"
                                                                              Category="@group"
                                                                              OptionName="@option.Name"
                                                                              SubOptionName="@subOption.Name"
                                                                              Cost="@subOption.Cost"
                                                                              IsActive="@subOption.IsActive" />
                                                            }
                                                        }
                                                        else
                                                        {
                                                            <ChangeOption HostName="@username"
                                                                          Category="@group"
                                                                          OptionName="@option.Name"
                                                                          Cost="@option.Cost"
                                                                          IsActive="@option.IsActive" />
                                                        }
                                                    </div>
                                                </div>
                                            </TabPage>
                                        }
                                    </TabControl>
                                </div>
                            </TabPage>
                        }
                    </TabControl>
                </div>
            </TabPage>
            <TabPage Text="Cooldown Control">
                <div class="col-12" style="padding: 10px;">
                    <div class="row">
                        <div class="col-4">
                            <label class="form-control">Cost & Cooldown</label>
                        </div>
                        <div class="col-4">
                            <div class="input-group">
                                <input type="text" class="form-control" @bind-value="cost">
                                <input type="text" class="form-control" @bind-value="cooldown">
                                <div class="input-group-append">
                                    <button class="btn btn-outline-primary" type="button" @onclick="AddCostCooldown">Add</button>
                                </div>
                            </div>
                        </div>
                    </div>
                    @foreach (var costCooldown in MemoryService.OptionCooldowns[username])
                    {
                        <div class="row">
                            <div class="col-4" style="padding: 5px;">
                                <ChangeCost HostName="@username"
                                            Cost="@costCooldown.Key"
                                            Cooldown="@costCooldown.Value" />
                            </div>
                        </div>
                    }
                </div>
            </TabPage>
        </TabControl>
    </div>
}

@code {

    private string username;
    private string clientId;
    private string connectionStatus = "Disconnected";
    private string connectionId;

    private TwitchApi twitchApi;

    private List<KH2FMCrowdControl.Data.KHAlert> alerts = new List<KH2FMCrowdControl.Data.KHAlert>();

    private int cost;
    private int cooldown;

    private string fileName = string.Empty;

    private int pointAmount;
    private int time;

    protected override async Task OnInitializedAsync()
    {
        MemoryService.OnAlertReceived += CreateAlert;
        MessageHub.OnConnectionStatusChanged += UpdateConnectionStatus;

        await base.OnInitializedAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender)
            return;

        username = await localStorage.GetItemAsync<string>("username");
        clientId = await localStorage.GetItemAsync<string>("clientId");

        if (!DbContext.Points.ContainsKey(username))
            DbContext.Points.Add(username, new PointCounter { PointAmount = 100, Time = 10 });

        if (DbContext.Hosts.ContainsKey(username))
            connectionStatus = DbContext.Hosts[username].ConnectionId == string.Empty ? "Disconnected" : "Connected";

        twitchApi = TwitchService.GetHost(username);

        await InvokeAsync(() =>
        {
            base.StateHasChanged();
        });
    }

    public async Task CreateAlert(object sender, AlertArgs alertArgs)
    {
        if (alertArgs.Host != username)
            return;

        alerts.Add(new KH2FMCrowdControl.Data.KHAlert { Viewer = alertArgs.Viewer, Item = alertArgs.Item, ImageUrl = alertArgs.ImageUrl });

        if (alerts.Count > 5)
            alerts.RemoveAt(0);

        await InvokeAsync(() =>
        {
            base.StateHasChanged();
        });
    }

    public async Task UpdateConnectionStatus(object sender, MessageHubArgs messageHubArgs)
    {
        if (messageHubArgs.HostName != username)
            return;

        connectionStatus = messageHubArgs.ConnectionStatus;
        connectionId = messageHubArgs.ConnectionId;


        if (string.IsNullOrEmpty(messageHubArgs.ConnectionId))
        {
            await this.StopHosting();
        }
        else
        {
            MessageHubMessages.SendUpdateOptionsMessage(username);
        }

        await InvokeAsync(() =>
        {
            base.StateHasChanged();
        });
    }

    private async Task StartHosting()
    {
        if (twitchApi != null)
        {
            await Task.Run(() => ToastService.ShowInfo("Already Hosting!"));
        }
        else if (connectionStatus.Equals("Connected") && connectionId != string.Empty)
        {
            twitchApi = TwitchService.CreateHost(username, clientId, connectionId, NavigationManager);

            await MemoryService.InitializeOptions(username);

            MessageHubMessages.SendUpdateOptionsMessage(username);

            await Task.Run(() => ToastService.ShowSuccess("Successfully Started Hosting!"));

            System.Diagnostics.Trace.WriteLine($"{username} Started Hosting...");

            await InvokeAsync(() =>
            {
                base.StateHasChanged();
            });
        }
        else
        {
            await Task.Run(() => ToastService.ShowError("Please Connect the Client First"));
        }
    }

    private async Task StopHosting()
    {
        TwitchService.RemoveHost(username);

        twitchApi = null;

        await Task.Run(() => ToastService.ShowInfo("Stopped Hosting"));

        System.Diagnostics.Trace.WriteLine($"{username} Stopped Hosting...");

        await InvokeAsync(() =>
        {
            base.StateHasChanged();
        });
    }

    private async Task AddCostCooldown()
    {
        if (cost == 0)
        {
            ToastService.ShowError("Cost cannot be 0");

            return;
        }

        var didUpdate = await MemoryService.AddCostCooldown(username, cost, cooldown);

        if (didUpdate)
        {
            // TODO Do I need to update the view here?
        }
        else
        {
            ToastService.ShowError("Probable cause: New cost is already set in the current list");
        }

        cost = 0;
        cooldown = 0;
    }

    private async Task DownloadOptionSettings()
    {
        try
        {
            var file = await MemoryService.ExportOptionCostCooldown(username);
            var convertedFile = System.Text.Encoding.UTF8.GetBytes(file);

            if (file.Length > 0)
            {
                var fullFileName = fileName.Length > 0 ? $"{fileName}.txt" : $"{username}_optionCosts.txt";

                await BlazorDownloadFileService.DownloadFile(fullFileName, convertedFile, new System.Threading.CancellationToken(), "application/json");

                ToastService.ShowSuccess("Successfully Exported File!");
            }
            else
            {
                ToastService.ShowError("Error Exporting File..");
            }
        }
        catch (Exception e)
        {
            System.Diagnostics.Trace.WriteLine(e.Message);
        }
    }

    private async Task UploadOptionSettings(IFileListEntry[] files)
    {
        try
        {
            var isSuccessful = await MemoryService.ImportOptionCostCooldown(username, files.FirstOrDefault());

            if (isSuccessful)
            {
                ToastService.ShowSuccess("Successfully Imported File!");
            }
            else
            {
                ToastService.ShowError("Error Importing File..");
            }
        }
        catch (Exception e)
        {
            System.Diagnostics.Trace.WriteLine(e.Message);
        }
    }

    private async Task UpdatePointsPerTime()
    {
        DbContext.Points[username].PointAmount = pointAmount;
        DbContext.Points[username].Time = time;


        // TODO Maybe pass in vars?
        if(twitchApi != null)
            twitchApi.GenerateTimer(username);


        ToastService.ShowSuccess("Successfully Updated Points per Second!");
    }
}