@page "/crowdcontrolhost"

@using KH2FMCrowdControl.Data
@using KH2FMCrowdControl.Twitch
@using Waterkh.Common.Memory;

@inject TwitchService TwitchService
@inject MemoryService MemoryService
@inject NavigationManager NavigationManager
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@inject IToastService ToastService
@inject IJSRuntime JSRuntime
@inject BlazorDownloadFile.IBlazorDownloadFileService BlazorDownloadFileService

<div class="main">
    <div class="top-row px-4">
        <div class="row" style="padding-top: 15px;padding-bottom: 10px;">
            <div class="col-2">
                <div style="max-height: 50px; overflow: hidden;">
                    <img style="width: 50%;" src="images/ReWrite-short.png">
                </div>
            </div>

            <div class="col-8">
                <h2 style="text-align: center;">@username Host View</h2>
            </div>

            @if (twitchApi != null)
            {
                <div class="col-2">
                    <button class="btn btn-outline-info" style="overflow: hidden; float: right;" @onclick="@(async () => await OnStreamerSelectedAsync(username))">Viewer View</button>
                </div>
            }
            else
            {
                <div class="col-2"></div>
            }

            <div class="col-12">
                <h1>
                </h1>
            </div>
        </div>

        <div class="row" style="padding-top: 15px;padding-bottom: 10px;">
            <div class="col-1">
                <a href="" style="float: left;">Back To Main</a>
            </div>

            <div class="col-3" style="text-align: center;">
                @if (twitchApi != null && DbContext.Hosts[username].IsHosting)
                {
                    <button type="button" class="btn btn-outline-info" @onclick="IntermidiateHosting">Pause Hosting</button>
                    <button type="button" class="btn btn-outline-danger" @onclick="StopHosting">Stop Hosting</button>
                }
                else if (twitchApi != null && !DbContext.Hosts[username].IsHosting)
                {
                    <button type="button" class="btn btn-info" @onclick="StartHosting">Start Hosting</button>
                    <button type="button" class="btn btn-outline-danger" @onclick="StopHosting">Stop Hosting</button>
                }
                else
                {
                    <button type="button" class="btn btn-outline-info" @onclick="IntermidiateHosting">Setup Hosting</button>
                    <button type="button" class="btn btn-info" @onclick="StartHosting">Start Hosting</button>
                }
            </div>

            @if (twitchApi != null)
            {
                <div class="col-4">
                    <div style="text-align: center;">
                        <div class="btn-group" role="group" style="display: inline-table !important;">
                            <button type="button" class="btn @GetButtonClass(0)" @onclick=@(() => ActivatePage(0))>
                                Alerts
                            </button>
                            <button type="button" class="btn @GetButtonClass(1)" @onclick=@(() => ActivatePage(1))>
                                Options
                            </button>
                            <button type="button" class="btn @GetButtonClass(2)" @onclick=@(() => ActivatePage(2))>
                                Cooldowns
                            </button>
                        </div>
                    </div>
                </div>
            }
            else
            {
                <div class="col-4"></div>
            }


            <div class="col-2">
                <div>Client Connection: <b>@connectionStatus</b></div>
            </div>


            <div class="col-2">

                <a href="https://discord.gg/8KUBjDV" target="_blank" style="float: right;">Dev Discord Server</a>
            </div>
        </div>
    </div>

    <div class="content px-4">
        
        @if (twitchApi != null)
        {
            <br />

            <div class="row">
                <div class="col-2">
                    <b>Points earned per Second:</b>
                </div>
                <div class="col-6"></div>
                <div class="col-2">
                    <b>Upload Options</b>
                </div>
                <div class="col-2">
                    <b>Download Options</b>
                </div>
                
                <div class="col-3">
                    <div class="input-group">
                        <input type="text" class="form-control" placeholder="Enter Point Amount" @bind-value="pointAmount">
                        <input type="text" class="form-control" placeholder="Enter Time in Seconds" @bind-value="time">
                        <div class="input-group-append">
                            <button class="btn btn-outline-primary" type="button" @onclick="UpdatePointsPerTime">Update</button>
                        </div>
                    </div>
                </div>
                <div class="col-5"></div>
                <div class="col-2">
                    <InputFile OnChange="UploadOptionSettings" />
                </div>
                <div class="col-2">
                    <button type="button" class="btn btn-info" @onclick="DownloadOptionSettings">Download Settings File</button>
                    <input type="text" class="form-control" @bind-value="@fileName" placeholder="Optional File Name" style="margin: 5px 0px 0px 0px">
                </div>
            </div>

            <br />
            <br />

            <div class="row">
                <div class="col-12"><h1>@(ActiveTab == 0 ? "Alerts" : ActiveTab == 1 ? "Options" : "Costs/ Cooldowns")</h1></div>
                @if (ActiveTab == 0)
                {
                    <div class="col-12" style="padding: 10px;">
                        <div class="row">
                            <div class="col-3">
                                <div style="padding: 5px">
                                    <h4>Background Color:   </h4><input type="color" @bind="@DbContext.AlertSettings[this.username].BackgroundColor" style="width:25%;">
                                </div>
                                <div style="padding: 5px">
                                    <h4>Alert Count:    </h4><input type="number" @oninput="@(() => UpdateCount(DbContext.AlertSettings[this.username].AlertCount))" @bind="@DbContext.AlertSettings[this.username].AlertCount" min="1" max="10" style="width:25%" />
                                    <span>@alertError</span>
                                </div>
                                <div style="padding: 5px">
                                    <button class="btn btn-primary" type="button" @onclick="NavigateToAlerts">Open Alerts Browser Source</button>
                                </div>
                                <div style="padding: 5px">
                                    <button class="btn btn-danger" type="button" @onclick="RemoveAlerts">Clear Alerts</button>
                                </div>
                            </div>

                            <div class="col-3">
                                <div style="padding: 10px; overflow: auto; display: flex; flex-direction: column-reverse; background-color:@DbContext.AlertSettings[this.username].BackgroundColor">
                                    @foreach (var alert in DbContext.Alerts[this.username])
                                    {
                                    <KHAlert Username="@alert.Viewer"
                                                 Item="@alert.Item"
                                                 ImageUrl="@alert.ImageUrl" />
                                    }
                                </div>
                            </div>
                        </div>
                    </div>
                }
                else if (ActiveTab == 1)
                {
                    <div class="col-12" style="padding: 10px; text-align: center;">
                        <TabControl>
                            @foreach (GroupType group in Enum.GetValues(typeof(GroupType)))
                            {
                                <TabPage Text="@group.ToString()">
                                    <div class="row" style="padding: 10px;">
                                        @foreach (var option in MemoryService.Options[username][group])
                                        {
                                            @if (option.SubCategory != SubGroupType.None && option.SubCategory != PreviousSubGroupType)
                                            {
                                                <div class="col-12" style="text-align: left;">
                                                    <h1>
                                                        <button type="button" class="btn btn-link" style="margin: 15px 0px 0px 0px;" @onclick="@(() => ExpandCollapse(option.SubCategory))">
                                                            <span class="@this.ExpandCollapseElements[option.SubCategory]" /><span class="headline"> @option.SubCategory</span>
                                                        </button>
                                                    </h1>
                                                </div>

                                                PreviousSubGroupType = option.SubCategory;
                                            }

                                            @if (this.ExpandCollapseElements[option.SubCategory] == "icon-down" || option.SubCategory == SubGroupType.None)
                                            {
                                                <KHButtonComponent HostName="@username"
                                                                    Name="@option.Name"
                                                                    Cost="0"
                                                                    ImageUrl="@option.ImageUrl"
                                                                    Description="@(option.IsActive == true ? "Active" : "Not Active")"
                                                                    Method="@(() => DisplayModal(option, username, group))" />
                                            }
                                        }
                                    </div>
                                </TabPage>
                            }
                        </TabControl>
                    </div>
                }
                else if (ActiveTab == 2)
                {
                    <div class="col-12" style="padding: 10px;">
                        <div class="row">
                            <div class="col-4">
                                <label class="form-control">Cost & Cooldown</label>
                            </div>
                            <div class="col-4">
                                <div class="input-group">
                                    <input type="text" class="form-control" @bind-value="cost">
                                    <input type="text" class="form-control" @bind-value="cooldown">
                                    <div class="input-group-append">
                                        <button class="btn btn-outline-primary" type="button" @onclick="AddCostCooldown">Add</button>
                                    </div>
                                </div>
                            </div>
                        </div>
                        @foreach (var costCooldown in MemoryService.OptionCooldowns[username])
                        {
                            <div class="row">
                                <div class="col-4" style="padding: 5px;">
                                    <ChangeCost HostName="@username"
                                                Cost="@costCooldown.Key"
                                                Cooldown="@costCooldown.Value" />
                                </div>
                            </div>
                        }
                    </div>
                }
            </div>
        }
    </div>
</div>

@code {
    [CascadingParameter]
    public IModalService Modal { get; set; }

    #region Private Vars

    private string username;
    private string clientId;
    private string connectionStatus = "Disconnected";
    private string connectionId;

    private TwitchApi twitchApi;

    private string alertError = string.Empty;

    private int cost;
    private int cooldown;

    private string fileName = string.Empty;

    private int pointAmount = 100;
    private int time = 10;

    Dictionary<SubGroupType, string> ExpandCollapseElements;
    private SubGroupType PreviousSubGroupType;

    #endregion Private Vars

    protected override async Task OnInitializedAsync()
    {
        MemoryService.OnAlertReceived += UpdateAlerts;
        MessageHub.OnConnectionStatusChanged += UpdateConnectionStatus;

        this.ExpandCollapseElements = new Dictionary<SubGroupType, string>();

        await base.OnInitializedAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender)
            return;

        username = await localStorage.GetItemAsync<string>("username");
        clientId = await localStorage.GetItemAsync<string>("clientId");

        if (!DbContext.Points.ContainsKey(username))
            DbContext.Points.Add(username, new PointCounter { PointAmount = 100, Time = 10 });

        if (DbContext.Hosts.ContainsKey(username))
            connectionStatus = DbContext.Hosts[username].ConnectionId == string.Empty ? "Disconnected" : "Connected";

        if (!DbContext.AlertSettings.ContainsKey(this.username))
            DbContext.AlertSettings.Add(this.username, new AlertSettings { AlertCount = 5, BackgroundColor = "#FFFFFF", Username = this.username });

        if (!DbContext.Alerts.ContainsKey(this.username))
            DbContext.Alerts.Add(this.username, new List<Data.KHAlert>());

        twitchApi = TwitchService.GetTwitchApi(username);

        if (!string.IsNullOrEmpty(username) && MemoryService.Options.ContainsKey(username))
        {
            foreach (GroupType groupType in Enum.GetValues(typeof(GroupType)))
            {
                foreach (var input in MemoryService.Options[username][groupType])
                {
                    if (!this.ExpandCollapseElements.ContainsKey(input.SubCategory))
                        this.ExpandCollapseElements.Add(input.SubCategory, "icon-up");
                }
            }
        }

        await InvokeAsync(() =>
        {
            base.StateHasChanged();
        });
    }

    #region General Host Methods

    #region Hosting 

    private async Task StartHosting()
    {
        if (twitchApi != null && DbContext.Hosts[username].IsHosting)
        {
            await Task.Run(() => ToastService.ShowInfo("Already Hosting!"));
        }
        else if (connectionStatus.Equals("Connected") && connectionId != string.Empty)
        {
            if (twitchApi == null)
                await this.CreateHost();

            DbContext.Hosts[username].IsHosting = true;

            await Task.Run(() => ToastService.ShowSuccess("Successfully Started Hosting!"));

            System.Diagnostics.Trace.WriteLine($"{username} Started Hosting...");


            await InvokeAsync(() =>
            {
                base.StateHasChanged();
            });
        }
        else
        {
            await Task.Run(() => ToastService.ShowError("Please Connect the Client First"));
        }
    }

    private async Task StopHosting()
    {
        TwitchService.RemoveHost(username);

        twitchApi = null;

        await Task.Run(() => ToastService.ShowInfo("Stopped Hosting"));

        System.Diagnostics.Trace.WriteLine($"{username} Stopped Hosting...");

        await InvokeAsync(() =>
        {
            base.StateHasChanged();
        });
    }

    private async Task IntermidiateHosting()
    {
        if (connectionStatus.Equals("Connected") && connectionId != string.Empty)
        {
            if (twitchApi == null)
                await this.CreateHost();

            DbContext.Hosts[username].IsHosting = false;

            await Task.Run(() => ToastService.ShowInfo("Setup/ Paused Hosting!"));

            System.Diagnostics.Trace.WriteLine($"{username} Setup/ Paused Hosting...");

            await InvokeAsync(() =>
            {
                base.StateHasChanged();
            });
        }
        else
        {
            await Task.Run(() => ToastService.ShowError("Please Connect the Client First"));
        }
    }

    private async Task CreateHost()
    {
        twitchApi = await TwitchService.CreateHost(username, clientId, connectionId, NavigationManager);

        await MemoryService.InitializeOptions(username);

        MessageHubMessages.SendUpdateOptionsMessage(username);

        foreach (GroupType groupType in Enum.GetValues(typeof(GroupType)))
        {
            foreach (var input in MemoryService.Options[username][groupType])
            {
                if (!this.ExpandCollapseElements.ContainsKey(input.SubCategory))
                    this.ExpandCollapseElements.Add(input.SubCategory, "icon-up");
            }
        }
    }

    #endregion Hosting

    public async Task UpdateConnectionStatus(object sender, MessageHubArgs messageHubArgs)
    {
        if (messageHubArgs.HostName != username)
            return;

        connectionStatus = messageHubArgs.ConnectionStatus;
        connectionId = messageHubArgs.ConnectionId;


        if (string.IsNullOrEmpty(messageHubArgs.ConnectionId))
        {
            await this.StopHosting();
        }
        else
        {
            MessageHubMessages.SendUpdateOptionsMessage(username);
        }

        await InvokeAsync(() =>
        {
            base.StateHasChanged();
        });
    }

    private async Task UpdatePointsPerTime()
    {
        if (pointAmount > 0 && time > 0)
        {
            DbContext.Points[username].PointAmount = pointAmount;
            DbContext.Points[username].Time = time;
        }
        else
        {
            ToastService.ShowError("Points and Time need to be greater than 0.");

            return;
        }

        // TODO Maybe pass in vars?
        if (twitchApi != null)
            twitchApi.GenerateTimer(username);


        ToastService.ShowSuccess("Successfully Updated Points per Second!");
    }

    protected async Task OnStreamerSelectedAsync(string username)
    {
        await localStorage.SetItemAsync("username", username);

        var url = TwitchService.RedirectToViewer(username);

        //NavigationManager.NavigateTo(url);
        await JSRuntime.InvokeAsync<object>("open", url, "_blank");
    }

    #region Tab Control

    public int ActiveTab { get; set; } = 0;

    string GetButtonClass(int tab)
    {
        return tab == ActiveTab ? "btn-primary" : "btn-secondary";
    }

    protected async Task ActivatePage(int tab)
    {
        ActiveTab = tab;

        await InvokeAsync(() =>
        {
            base.StateHasChanged();
        });
    }

    #endregion Tab Control

    #endregion General Host Methods

    #region Alerts

    protected async Task NavigateToAlerts()
    {
        var url = $"{Constants.RedirectUriAlert}?username={this.username}";

        await JSRuntime.InvokeAsync<object>("open", url, "_blank");
    }

    protected async Task UpdateCount(int count)
    {
        if (count > 10)
        {
            DbContext.AlertSettings[this.username].AlertCount = 10;
            alertError = "Alert Count needs to be under 10";
        }
        else if (count < 1)
        {
            DbContext.AlertSettings[this.username].AlertCount = 1;
            alertError = "Alert Count needs to be above 1";
        }
        else
        {
            DbContext.AlertSettings[this.username].AlertCount = count;
            alertError = "";
        }

        await InvokeAsync(() =>
        {
            base.StateHasChanged();
        });
    }

    protected async Task UpdateAlerts(object sender, AlertArgs alertArgs)
    {
        await InvokeAsync(() =>
        {
            base.StateHasChanged();
        });
    }

    protected async Task RemoveAlerts()
    {
        DbContext.Alerts[this.username].Clear();

        await InvokeAsync(() =>
        {
            base.StateHasChanged();
        });
    }

    #endregion Alerts

    #region Options

    protected void DisplayModal(ButtonTemplate option, string hostName, GroupType groupType)
    {
        var parameterName = "Options";
        var parameters = new ModalParameters();

        parameters.Add("Option", option);
        parameters.Add("HostName", hostName);
        parameters.Add("GroupType", groupType);

        Modal.Show<KHHostModalOptions>(parameterName, parameters);
    }

    private async Task DownloadOptionSettings()
    {
        try
        {
            var file = await MemoryService.ExportOptionCostCooldown(username);
            var convertedFile = System.Text.Encoding.UTF8.GetBytes(file);

            if (file.Length > 0)
            {
                var fullFileName = fileName.Length > 0 ? $"{fileName}.txt" : $"{username}_optionCosts.txt";

                await BlazorDownloadFileService.DownloadFile(fullFileName, convertedFile, new System.Threading.CancellationToken(), "application/json");

                ToastService.ShowSuccess("Successfully Exported File!");
            }
            else
            {
                ToastService.ShowError("Error Exporting File..");
            }
        }
        catch (Exception e)
        {
            System.Diagnostics.Trace.WriteLine(e.Message);
        }
    }

    private async Task UploadOptionSettings(IFileListEntry[] files)
    {
        try
        {
            var isSuccessful = await MemoryService.ImportOptionCostCooldown(username, files.FirstOrDefault());

            if (isSuccessful)
            {
                ToastService.ShowSuccess("Successfully Imported File!");
            }
            else
            {
                ToastService.ShowError("Error Importing File..");
            }
        }
        catch (Exception e)
        {
            System.Diagnostics.Trace.WriteLine(e.Message);
        }
    }

    protected void ExpandCollapse(SubGroupType subGroupType)
    {
        this.ExpandCollapseElements[subGroupType] = this.ExpandCollapseElements[subGroupType] == "icon-down" ? "icon-up" : "icon-down";
    }

    #endregion Options

    #region Cost/ Cooldown

    private async Task AddCostCooldown()
    {
        if (cost == 0)
        {
            ToastService.ShowError("Cost cannot be 0");

            return;
        }

        var didUpdate = await MemoryService.AddCostCooldown(username, cost, cooldown);

        if (didUpdate)
        {
            // TODO Do I need to update the view here?
        }
        else
        {
            ToastService.ShowError("Probable cause: New cost is already set in the current list");
        }

        cost = 0;
        cooldown = 0;
    }

    #endregion Cost/ Cooldown
}