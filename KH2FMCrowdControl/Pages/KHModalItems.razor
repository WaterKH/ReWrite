@using Waterkh.Common.Memory 

<div class="simple-form">

    <div class="form-group">
        <div class="row">
            @foreach (var button in Options)
            {
                @if (button.Cost == 0)
                {
                    <KHButtonComponent HostName="@HostName"
                                       Name="@button.Name"
                                       ParentName="@ParentName"
                                       Cost="0"
                                       ViewerName="@ViewerName"
                                       ImageUrl="@button.ImageUrl"
                                       Description="@button.Description"
                                       Method="@(() => DisplaySubModal(button.SubMethodParams.Where(x => x.IsActive).ToList(), ParentName))"
                                       IsDisabled="@button.IsDisabled" />
                }
                else
                {
                    <KHButtonComponent HostName="@HostName"
                                       Name="@button.Name"
                                       ParentName="@ParentName"
                                       Cost="@button.Cost"
                                       ViewerName="@ViewerName"
                                       Value="@button.Value"
                                       ManipulationType="@button.ManipulationType"
                                       ImageUrl="@button.ImageUrl"
                                       Description="@button.Description"
                                       MethodName="@button.MethodName"
                                       IsDisabled="@button.IsDisabled" />
                }
            }
        </div>
    </div>

    <button @onclick="BlazoredModal.Cancel" class="btn btn-secondary">Cancel</button>
</div>

@code { 
    [CascadingParameter]
    BlazoredModalInstance BlazoredModal { get; set; }

    [CascadingParameter]
    public IModalService Modal { get; set; }


    [Parameter]
    public string HostName { get; set; }

    [Parameter]
    public string ViewerName { get; set; }

    [Parameter]
    public string ParentName { get; set; }

    [Parameter]
    public List<ButtonTemplate> Options { get; set; }

    protected override void OnInitialized()
    {
        KH2FMCrowdControl.Data.MemoryService.OnTimerChanged += CancelModal;
    }


    protected async Task CancelModal(object sender, ChangeEventArgs e)
    {
        if(this.Options.Any(x => x.Name == e.Value.ToString()))
        { 
            await BlazoredModal.Cancel();

            await InvokeAsync(() =>
            {
                base.StateHasChanged();
            });
        }
    }

    protected void DisplaySubModal(List<ButtonTemplate> values, string parentName)
    {
        var parameterName = "Options";
        var parameters = new ModalParameters();

        parameters.Add(parameterName, values);
        parameters.Add("ParentName", parentName);
        parameters.Add("HostName", HostName);
        parameters.Add("ViewerName", ViewerName);

        Modal.Show<KHModalItems>(parameterName, parameters);
    }
}